--- a~/_deps/pkg/mod/github.com/muesli/termenv@v0.6.0/termenv_unix.go	Thu Feb 20 17:48:35 2020
+++ a/_deps/pkg/mod/github.com/muesli/termenv@v0.6.0/termenv_unix.go	Thu Feb 20 17:49:27 2020
@@ -7,7 +7,9 @@
 	"os"
 	"strconv"
 	"strings"
-	"syscall"
+	"fmt"
+	"golang.org/x/sys/unix"
+	"github.com/google/goterm/term"
 )

 func colorProfile() Profile {
@@ -70,14 +70,37 @@
 	return ANSIColor(0)
 }
 
+func termStatusReport(sequence int) (string, error) {
+	t, err := term.Attr(os.Stdout)
+	if err != nil {
+		return "", ErrStatusReport
+	}
+	defer t.Set(os.Stdout)
+
+	noecho := t
+	noecho.Lflag = noecho.Lflag &^ term.ECHO
+	noecho.Lflag = noecho.Lflag &^ term.ICANON
+	if err := noecho.Set(os.Stdout); err != nil {
+		return "", ErrStatusReport
+	}
+
+	fmt.Printf("\033]%d;?\007", sequence)
+	s, ok := readWithTimeout(os.Stdout)
+	if !ok {
+		return "", ErrStatusReport
+	}
+	// fmt.Println("Rcvd", s[1:])
+	return s, nil
+}
+
 func readWithTimeout(f *os.File) (string, bool) {
-	var readfds syscall.FdSet
+	var readfds unix.FdSet
 	fd := f.Fd()
 	readfds.Bits[fd/64] |= 1 << (fd % 64)
 
 	// Use select to attempt to read from os.Stdout for 100 ms
 	err := sysSelect(int(fd)+1,
 		&readfds,
-		&syscall.Timeval{Usec: 100000})
+		&unix.Timeval{Usec: 100000})
 
 	if err != nil {
 		// log.Printf("select(read stdout): %v", err)
